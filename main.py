from libs import generatePassword
from configparser import ConfigParser
import time

def viewSettings(config):

    config.read("config.ini")

    view = ""
    for i in config["passwd_chars"]:
        if config["passwd_chars"][i] == "True":
            view += "‚Ä¢ " + i + ": üóπ\n"
        else:
            view += "‚Ä¢ " + i + ": ‚òí\n" 
    return view

def changeSettings(cfg):
    
    print("\n[!] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å")
    
    settingsList = ["upper", "lower", "digits", "puncts"]
    print(viewSettings(cfg))
    while True:
        print("1 - –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, 2 - –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä, 3 - —Ü–∏—Ñ—Ä—ã, 4 - —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã –∏ –ª—é–±–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ - –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        choiceForChange = input("\n–í–≤–æ–¥: ")
        if choiceForChange.isdigit():
            if 0 < int(choiceForChange) < 5:
                
                config.read("config.ini")
                temp = config["passwd_chars"][settingsList[int(choiceForChange) - 1]]
                config["passwd_chars"][settingsList[int(choiceForChange) - 1]] = "False" if temp == "True" else "True"
                
                with open ("config.ini", "w") as cfgFile:
                    config.write(cfgFile)
                
                print(viewSettings(cfg))

            else:
                return "settings"
        else:
            print("[!!] –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –°–ø–∏—Å–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:")
                
def main(choice, config):
    
    # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ —á–∏—Å–ª–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –¥–ª–∏–Ω–Ω–∞ –∏ –µ—ë –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ config —Ñ–∞–π–ª—ã
    if choice.isdigit():
        if int(choice) >= 4 and int(choice) <= 128:
            config.read("config.ini")
            config["settings"]["len"] = choice

            with open("config.ini", "w") as configF:
                config.write(configF)
            print("[!] –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        else:
            return "falseLen"
    elif choice.lower() == "g":
        if len(generatePassword.addConstsOfModuleString(config)) > 0:
            config.read("config.ini")
            newPasswd = generatePassword.getSecretString(int(config["settings"]["len"]))
            print("[!] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: " + newPasswd)
        else:
            return "noneSimbols"
    elif choice.lower() == "q":
        return "exit"
    elif choice.lower() == "s":
        return changeSettings(config)
    else:
        return "false"
    
    return "completed"

def start():    
    dictExceptMessages = {
        "falseLen": "\n[!!] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π —Ç–æ–ª—å–∫–æ –æ—Ç 4 –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤!",
        "exit": "\n[!] –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ :)",
        "false": "\n[!] –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!",
        "settings": "\n[!] –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        "completed": 0,
        "noneSimbols": "\n[!] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ –≤–∫–ª—é—á—ë–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤!",
        "isunknown": "\n[!] –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!",
        "fnotfound": "\n[!] –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    }

    print("\n[!] –í–≤–µ–¥–∏—Ç–µ s - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, q - –≤—ã—Ö–æ–¥, g - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–ª–∏", end=' ')
    print("–ª—é–±–æ–µ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –ø–∞—Ä–æ–ª—è")

    try:
        response = main(input("–í–≤–æ–¥: "), config)
        if response != "false" and response != "exit" and response != "completed":
            print(dictExceptMessages[response])
        elif response == "false":
            print(dictExceptMessages[response])
        elif response == "completed":
            pass
        else:
            return dictExceptMessages[response]
    except KeyError:
        return dictExceptMessages["isunknown"]
    except FileNotFoundError:
        return dictExceptMessages["fnotfound"]

    time.sleep(0.5)
    return start()

config = ConfigParser()
logo = """ 
        ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  
    ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
    ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ    ‚ñà‚ñà‚ñà    ‚ñà‚ñÄ  
    ‚ñà‚ñà‚ñà         ‚ñÑ‚ñà‚ñà‚ñà        
    ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñÄ‚ñÄ‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñÑ  
            ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
    ‚ñÑ‚ñà    ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà‚ñà 
    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ  
                            
    """
print(logo + "‚Äî ‚Äî SharkGenerator ‚Äî ‚Äî\n\t\t\t\t.by dap0pe", "\n")
print(start())
